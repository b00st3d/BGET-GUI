<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RichTextBox1.Text" xml:space="preserve">
    <value>  ---------------------------------------------------------------------------
  Bget v0.3.0-260119            Package Manager for Windows Scripts.
  Made by Jahwi in 2018 | Edits made by Icarus | Bugs squashed by B00st3d
  https://github.com/jahwi/bget
  Type bget -help to get the list of commands.
  ---------------------------------------------------------------------------

Table of Contents
1.      Introduction
2.      Features
3.      Running Bget
4.      Switches
        a.      GET
        b.      PASTEBIN
        c.      REMOVE
        d.      Update
        e.      INFO
        f.      LIST
        g.      UPGRADE
        h.      HELP
        i.      OPENSCRIPTS
        j.      SEARCH
        k.      NEWSCRIPTS
        l.      SET
5.      Methods
        a.      Jscript -JS
        b.      Visual Basic Script -VBS
        c.      Powershell -PS
        d.      BITSAdmin -BITS
        e.      CURL
6.      Troubleshooting
7.  Contact
8.  Thanks

INTRODUCTION
Bget is a batch-file command-line tool for handling Windows scripts. It is built to be a companion to those who write, use and maintain Windows scripts. It helps those who use scripts easily download, update and remove scripts. It's built for scripters, by scripters.
Bget was conceived in 2016, but this reincarnation of Bget was made in 2018.

Features
1.      Download scripts from the Bget server: These scripts are vetted and sorted by us. We've gone about curating some of the most interesting scripts we could find that we think would be interesting and useful to you as well.
2.      Download scripts from Pastebin: Pastebin has long been the coder's friend, and so we added the ability to fetch scripts from Pastebin. These scripts are not pre-vetted however, but they offer the ability for fast code downloading without waiting for us to vet them.
3.      Update scripts: Rather than manually re-download the latest version of every script, Bget handles that for you, getting the latest version of any script you've downloaded.
4.      Easily remove scripts: Don't like a script you downloaded? Easily remove it with Bget. One command and it's buh-bye script.
5.      View script info: This allows you to see basic information about a script such as its name, author and description, allowing you to make an informed decision before downloading.
6.      Bget also allows you to list all scripts on the server and list downloaded scripts on the local computer.
7.      Upgrade feature: Bget also updates itself so you always stay up-to-date.
8.      Multiple download methods: Bget has many ways to get a script. These are: Jscript, VBScript, Powershell, BITSAdmin and CURL.


Running Bget
Captain Obvious: Bget is a command-line tool, so it needs to be run from the command line. A typical Bget command looks like this:
Bget [-switch] [-method] [ARGUMENT]

Here's an example:
Scenario: You want to fetch a script named test from the server. The easiest way to do this would be:
BGET -get -usecurl test

Switches

[A] -Get:
This is the script fetching function.
Usage:
BGET -get -usemethod script
Supported methods: JS, VBS, PS, CURL, BITS
Example:
BGET -get -usevbs test
The above will download the script named "test" from the Bget server using the VBS download function.
To get more than one script at once, use:
BGET -get -usemethod "scripts"
Example:
BGET -get -usecurl "test tetris bigtext"
You can also get all the scripts on the bget server.
Usage:
BGET -get -usemethod -all
Example:
BGET -get -usejs -all

[B] -Pastebin:
This fetches a pastebin raw and saves it as a .bat script.
Usage:
BGET -pastebin -usemethod PASTECODE LOCAL_FILENAME
Supported methods: JS, VBS, PS, CURL.
BITSADMIN (BITS method) is not compatible with the -pastebin switch.
Example:
BGET -pastebin -usecurl 1wsBxRs4 script.bat
The paste code is the unique element of a Pastebin URL.
i.e., A Pastebin script located at https://pastebin.com/YkEtQYFR would have YkEtQYFR as its paste code. If you get the paste code wrong, you'll get a Pastebin error webpage as the output file instead of your intended script. Also, the Pastebin scripts have not been vetted by us so be sure to inspect all scripts fetched from Pastebin.

[C] -Remove:
Removes a downloaded script
Usage:
BGET -remove script
Example:
BGET -remove test
To remove more than one script at once,
Example:
BGET -remove "test tetris bigtext"
You can also remove all scripts at once.
Example:
BGET -remove -all
To remove all pastebin scripts:
BGET -remove -pastebin

[D] -Update:
Updates the specified script.
Usage:
BGET -update -usemethod script
Supported methods: JS, VBS, PS, CURL, BITS
Example:
BGET -update -usejs test
To update more than one script at once,
BGET -update -usemethod "script1 script2 script3 scriptn"
Example:
BGET -update -usecurl "test tetris bigtext"
You can also update all your scripts at once.
Usage:
BGET -update -usemethod -all
Example:
BGET -update -usejs -all
You can force an upgrade as well.
Usage:
BGET -update -usemethod [-all/SCRIPTNAME] -force
Example:
BGET -update -usecurl -all -force
BGET -update -usejs test -force

[E] -Info:
Retrieves basic info about a script.
Usage:
BGET -info -usemethod script
Supported methods: JS, VBS, PS, CURL, BITS
Example:
BGET -info -usevbs test

[F] -List:
Lists either local scripts or scripts on the server.
Usage:
To list local sctipts:
BGET -list -local
To list scripts on the server:
BGET -list -server -usemethod
Example:
BGET -list -server -usejs
Supported methods: JS, VBS, PS, CURL, BITS
You can also view the list with less formatting, so you can se the full descriptions.
Usage:
BGET -list -server -usemethod -full
Example:
BGET -list -server -usejs -full

[G] -Upgrade:
Updates bget to the latest version
Usage:
BGET -upgrade -usemethod
Example:
BGET -upgrade -usevbs
Supported methods: JS, VBS, PS, CURL, BITS
You can also force Bget to get the latest version, regardless of that currently installed.
Usage:
BGET -upgrade -usemethod -force
Example:
BGET -upgrade -usecurl -force

[H] -HELP:
Prints the help text.
-help -doc opens this readme.

[I] -OPENSCRIPTS
Opens the scripts folder.

[J] -SEARCH
Search for scripts on the Bget server.
Usage:
BGET -search -usemethod "string"
Example:
BGET -search -usejs "Jahwi"

[K] -NEWSCRIPTS
Shows you new scripts we've added.
Usage:
BGET -newscripts -usemethod
Example:
BGET -newscripts -usejs

[L] -SET
Changes global variables such as the default downlaod method.
Usage scenario [1]: changing the default download method.
BGET -set -ddm {method}
Example:
BGET -set -ddm vbs
Usage scenario [2]: toggle auto-delete logs (toggles deletion of temp files)
BGET -set -adl {option}
Example:
BGET -set -adl yes
Usage scenario [3]: Change the default scripts location.
BGET -set -scl "path"
Example:
BGET -set -scl "C:\scripts"

[M] -QUERY
Displays the values of select global variables.
Usage:
BGET -QUERY {variable_name}
Example:
BGET -QUERY defmethod
You can also query all the configurable global variables.
Example: BGET -QUERY -all

Methods
Bget's 'methods' are the various ways through which Bget interacts with servers. There are currently 5 methods:

The JS method: It uses a JS download script.
The VBS method: Uses a download script written in VBS.
The PS method: uses Powershell to download resources.
The BITS method: Uses bitsadmin to download resources. It is not compatible with the Pastebin switch.
The CURL method: Uses curl to download resources.
Usage:

BGET [-switch] [-method] [-script]

Where the methods are: -usejs, -usevbs, -useps, -usebits, -usecurl. It should be noted that the BITS method does not work
with scripts located on external repositories.

Examples:

BGET -get -usejs test
BGET -update -usevbs test
BGET -pastebin -useps 1wsBxRs4
BGET -list -server -usebits
BGET -upgrade -usecurl
BGET -info -usejs test

TROUBLESHOOTING

[1] VBS/JS download methods fail: This is typically caused by antivirus software.
        Remedies:       [a] Whitelist the Bget path or
                                [b] Use the BITS/PS methods
[2] BITS download method fails: BITS method is slow and does not download scripts from external repositories.
        Remedies:       [a] Use other methods.
[3] External-File-No-Hash-Available
        These occur because the script is located in an external repository. There is no remedy for now.
[4] Nil in the Last Modified field
        These occur because the script is located in an external repository. There is no remedy for now.


Contact
If you're having an issue with bget, would like to submit a script or just want to chat (jk, we're boring people), contact us at batchget [at] gmail [dot com]

Thanks
I'd like to say thanks to the following:
b00st3d
Icarus Lives
Freebooter
Setlucas

I'd also like to credit the creators of cURL.</value>
  </data>
</root>